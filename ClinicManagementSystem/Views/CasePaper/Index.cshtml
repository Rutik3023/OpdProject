@model ClinicManagementSystem.Models.VMCasePaper

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}

<script>

    $(document).ready(function () {
    
        Loaddata(0);
        $("#OpenModal").click(function () {
            $("#CasepaperModal").show();
        });

        $("[data-bs-dismiss='modal']").click(function () {
            $("#CasepaperModal").hide();
        });

        $("#Save").click(function () {

            //validation....
         
            // save to db
           
            var obj = {
                "Id": $("#Id").val(),
                "PId": $("#PId").val(),
                "Height": $("#Height").val(),
                "Wight": $("#Wight").val(),
                "BP": $("#BP").val(),
                "CasepaperFee": $("#CasepaperFee").val(),
              

                "HealthIssue": $("#HealthIssue").val(),
                "Createdon": $("#Createdon").val(),
                

            };
            console.log(JSON.stringify(obj));
            $.ajax({
                "url": "/CasePaperApi/Save",
                "method": "post",
                "contentType": "application/json",
                "data": JSON.stringify(obj),

                success: function (data) {

                    alert(data.Message);
                    Loaddata(0);
                    $("#CasepaperModal").hide();

                },
                error: function (err) { console.log(err); }
            });


        });

        $("#txtSearch").keyup(function () {
            $.ajax(
                {
                    "url": "/CasePaperApi/GetAll?key=" + $("#txtSearch").val(),
                    "method": "get",
                    success: function (data) {
                        console.log(data);
                        if (data.Code == 0) {
                            $("#CasePaperload").empty();
                            $.each(data.Message, function (index, item) {
                                var myDate = new Date(item.Createdon.match(/\d+/)[0] * 1);
                                $("#CasePaperload").append("<tr><td><div class='btn-group-sm' role='group'aria-label='Basic example'><button type='button'class='btn btn-sm btn-outline-warning'><i class='bx bxs-edit m-0'></i>Add Appointment</button><button type='button'onclick='Edit(" + item.Id + ")' class='btn btn-sm btn-outline-primary'><i class='bx bxs-edit m-0'></i></button><button onclick='Delete(" + item.Id + ")' type='button' class='btn btn-sm btn-outline-danger'><i class='bx bx-trash'></i></button></div></td><td>" + item.Id + "</td><td>" + item.PId + "</td> <td>" + item.Height + "</td><td>" + item.Wight + "</td> <td>" + item.BP + "</td><td>" + item.CasepaperFee + "</td><td>" + item.HealthIssue + "</td><td>" + myDate.toLocaleDateString() + "</td></tr>");
                            });
                        }
                    },
                    error: function (message) {
                        console.log(message);
                    }
                }
            );
        });









    });

    function Loaddata(pagno) {

        $.ajax({

            "url":"/CasePaperApi/GetAllC?pagno=" + pagno,
            "method": "get",
            success: function (Data) {


                console.log(Data);
                $("#CasePaperload").empty();
                $.each(Data.Message, function (index, item) {
                    var myDate = new Date(item.Createdon.match(/\d+/)[0] * 1);
                    previous = Data.pageno - 1;
                    Next = Data.pageno + 1;
                    if (previous == -1) {
                        previous = 0;
                    }
                     console.log(Data.Message);
                    var next = Data.pageno + 1;
                    $("#CasePaperload").append("<tr><td><div class='btn-group-sm' role='group'aria-label='Basic example'><button type='button'class='btn btn-sm btn-outline-warning'><i class='bx bxs-edit m-0'></i>Add Appointment</button><button type='button'onclick='Edit(" + item.Id + ")' class='btn btn-sm btn-outline-primary'><i class='bx bxs-edit m-0'></i></button><button onclick='Delete(" + item.Id + ")' type='button' class='btn btn-sm btn-outline-danger'><i class='bx bx-trash'></i></button></div></td><td>" + item.Id + "</td><td>" + item.PId + "</td> <td>" + item.Height + "</td><td>" + item.Wight + "</td> <td>" + item.BP + "</td><td>" + item.CasepaperFee + "</td><td>" + item.HealthIssue + "</td><td>" + myDate.toLocaleDateString()+ "</td></tr>");

                    @*@Html.ActionLink("Add Appointment", "Appointment", null, new { @class = "btn btn-sm btn-outline-warning" })*@

                })
            },
            error: function (error) {

                console.log(error);

            }

         

        });
    }

    function Delete(id) {
        if (confirm("Are you sure?")) {

            $.ajax({
                "url": "/CasePaperApi/Delete?id=" + id,
                "method": "get",
                success: function (rep) {

                    if (rep.Code == 0) {
                        alert(rep.Message);
                        Loaddata(0);
                    }
                },
                error: function (err) {
                    console.log(err);
                }
            });
        }


    }

    function Edit(id) {

        $.ajax({
            "url": "/CasePaperApi/FindByid?id=" + id,
            "method": "get",
            success: function (rep) {

                if (rep.Code == 0) {

                    var obj = rep.Message;

                    console.log(obj);

                    $("#Id").val(obj.Id);
                    $("#PId").val(obj.PId);
                    $("#Height").val(obj.Height);
                    $("#Wight").val(obj.Wight);
                    $("#BP").val(obj.BP);
                    $("#CasepaperFee").val(obj.CasepaperFee);
                   
                  
                    $("#HealthIssue").val(obj.HealthIssue);
                    $("#Createdon").val(obj.Createdon);
                  
                    $("#CasepaperModal").show();
                }
            },
            error: function (err) {
                console.log(err);
            }
        });
    }


</script>

<div class="modal" id="CasepaperModal" tabindex="-1" style="background: #00000014;">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable" style="width:70vw">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Casepaper Form</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="row">
                            <div class="col-12">
                                <div class="row">
                                    <div class="col-12">
                                        @Html.HiddenFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.PId, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-12">
                                                @Html.DropDownListFor(model => model.PId, (IEnumerable<SelectListItem>)ViewBag.Patient, new { @class = "form-control" } )
                                                @Html.ValidationMessageFor(model => model.PId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-12">
                                                @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Wight, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-12">
                                                @Html.EditorFor(model => model.Wight, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Wight, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BP, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-12">
                                                @Html.EditorFor(model => model.BP, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.BP, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CasepaperFee, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-12">
                                                @Html.EditorFor(model => model.CasepaperFee, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.CasepaperFee, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.HealthIssue, htmlAttributes: new { @class = "control-label col-md-2" })
                                            <div class="col-md-12">
                                                @Html.TextAreaFor(model => model.HealthIssue, new { @class = "form-control", @rows = "4" })
                                                @Html.ValidationMessageFor(model => model.HealthIssue, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    @*<div class="col-6">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.CreatedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-12">
                                                    @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.CreatedOn, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="col-md-12">
                                                    @Html.EditorFor(model => model.CreatedOn, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.CreatedOn, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>*@
                                </div>
                            </div>
                        </div>

                        <div class="form-group mt-3">
                            <div class="col-md-offset-2 col-md-12 text-end">
                                <input type="button" id="Save" value="Save" class="btn btn-success" />
                            </div>
                        </div>
                    </div>
                }

            </div>
            @*<div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success">Save changes</button>
                </div>*@
        </div>
    </div>
</div>

<div class="CasepaperPage px-4 py-3 border-top">
    <div class="row">
        <div class="col-9">
            <div class="input-group">
                <span class="input-group-text"><i class='bx bx-search fs-5'></i></span>
                <input type="text" id="txtSearch" class="form-control" placeholder="Search casepaper by and Health....">
            </div>
        </div>
        <div class="col-3 d-flex justify-content-end">
            <button class="btn btn-sm d-flex align-items-center text-white" style="background: #00acb1;" id="OpenModal"><i class='bx bx-plus fs-5'></i>Add New Casepaper</button>
        </div>
    </div>
    <hr />
    <div class="AllCasepaperData overflow-auto mt-2 bg-secondary p-3" style="max-height:90vh;">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Id</th>
                    <th>Patient Name</th>
                    <th>Height</th>
                    <th>Weight</th>
                    <th>Blood Presure</th>
                    <th>Casepaper Fee</th>
                    
                    <th>Health Issue</th>
                    <th>CreatedOn</th>
                </tr>
            </thead>
            <tbody id="CasePaperload">

                @*<tr>
                        <td>
                            <div class="btn-group-sm" role="group" aria-label="Basic example">
                                @Html.ActionLink("Add Appointment", "Appointment", null, new { @class = "btn btn-sm btn-outline-warning" })
                                <button type="button" class="btn btn-sm btn-outline-primary"><i class='bx bxs-edit m-0'></i></button>
                                <button type="button" class="btn btn-sm btn-outline-danger"><i class='bx bx-trash'></i></button>
                            </div>
                        </td>
                        <td>Id</td>
                        <td>Patient Name</td>
                        <td>Height</td>
                        <td>Weight</td>
                        <td>Blood Presure</td>
                        <td>Casepaper Fee</td>
                        <td>Is Valid</td>
                        <td>Health Issue</td>
                        <td>CreatedOn</td>
                    </tr>*@
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-12 text-right">
        @{





            <a onclick="Loaddata(previous) " class="btn btn-danger">previous</a>
            int totaln = (int)TempData.Peek("count");
            for (int i = 0; i <= totaln / 8; i++)
            {
                int total = i + 1;
                <a onclick="Loaddata( @i)" class="btn btn-danger">@total</a>

            }
            <a onclick="Loaddata(Next)" class="btn btn-danger">Next</a>

        }


    </div>




</div>
